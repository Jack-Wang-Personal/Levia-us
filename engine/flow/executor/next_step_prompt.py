def next_step_prompt(plan, current_step, context):
    prompt_template = f"""Here is the complete workflow:
<workflow>
{str(plan)}
</workflow>

You are an AI assistant tasked with analyzing a workflow and determining if the current step can proceed based on available information. Your goal is to ensure all required arguments are present and to evaluate the necessity and availability of optional arguments.

The next step to be executed is:
<current_step>
{str(current_step)}
</current_step>

The current context, which may include input and previous outputs, is:
<context>
{str(context)}
</context>

Please follow these steps to analyze the current situation:

1. Extract Arguments:
   - List all required and optional arguments for the current step.
   - Determine which arguments are provided from the input and previous outputs.

2. Validate Arguments:
   - For each required argument, confirm if it is satisfied and note its source.
   - For each optional argument, evaluate if it's needed and if it can be derived from the context.

3. Determine Source and Method:
   For each argument, note:
   - Source: 
     * "context" if the value is generated from the context
     * "input" if the value is from user input
     * The previous step number if the value is from a previous step's output
   - Method:
     * "LLM" if the value is generated by LLM or needs LLM processing
     * If the value can be transferred directly or requires coding, provide the exact code, e.g., code(previous_step_output)

4. Prepare Response:
   Based on your analysis, prepare a JSON response in one of the following formats:

   If all required arguments are present and no critical information is missing:
   ```json
   {{
     "step": "<current step number>",
     "can_proceed": true,
     "extracted_arguments": {{
       "required_arguments": {{
         "<argument-name>": {{"source": "<source_of_the_value>", "method": "<method_to_get_the_value>", "value": "<value>"}},
         "<argument-name>": {{"source": "<source_of_the_value>", "method": "<method_to_get_the_value>", "value": "<value>"}},
         ...
       }}
     }}
   }}
   ```

   If the step cannot proceed:
   ```json
   {{
     "step": "<current step number>",
     "can_proceed": false,
     "missing_required_arguments": ["<list of missing required arguments>"],
     "needed_optional_arguments": ["<list of optional arguments that are required>"],
     "remarks": "<natural language explanation if applicable>"
   }}
   ```

Before providing your final JSON output, wrap your analysis in <argument_analysis> tags. In this analysis:
1. List all arguments (required and optional) from the current step.
2. For each argument, identify its corresponding value from the context or previous steps.
3. For each required argument, state whether it's satisfied and its source.
4. For each optional argument, evaluate if it's needed and if it can be derived.
5. Explicitly state the method for obtaining each argument, including code snippets when applicable.

It's OK for this section to be quite long, as a thorough analysis is crucial for determining if the step can proceed.
"""
    prompt_template_V1 = f"""Help me to determine if the current step can proceed.
Each tool has a name, method, required arguments, optional arguments, and an expected output. The workflow executes tools sequentially. The input for the workflow may consist of natural language, structured data, key-value pairs, or a mix of these formats. Your task is to evaluate whether the input and the outputs from previously executed tools provide sufficient information to proceed with each tool in the workflow.
Here is the workflow: {str(plan)}
next step is : {str(current_step)}
context is: {str(context)}
For each step in the following workflow:
1. Extract Arguments: Identify all required and optional arguments provided from the input and previous outputs.
2. Validation:
- Confirm if all required arguments for the current tool are satisfied.
- Evaluate if any optional arguments are needed and determine if they can be derived from the context.
3. Noted the source of the value, method to get the value, and value.
- if the value is from the context, the source is "context"
- if the value is from the input, the source is "input"
- if the value is from the previous step, the source is the previous step number
4. Noted the method to get the value.
- if the value is from the context, that means the value generated the context by LLM, the method is "LLM"
- if the value is from the user input, and it may need to be processed by LLM, the method is "LLM"
- if the value is from the outputs from previous steps, and it can be stransfered directly or coding. I need you write down the code of the transfer: code(previous_step_output)

Action:
If all required arguments are present and no critical information is missing, only output a json fit the arguments of next format, do not output anything else:
{{
    "step": "<current step number>",
    "can_proceed": true,
    "extracted_arguments": {{
        "required_arguments": {{
            "<argument-name>": {{"source": "<source of the value>", "method": "<method to get the value>", "value": "value"}},
            "<argument-name>": {{"source": "<source of the value>", "method": "<method to get the value>", "value": "value"}},
            ...
        }}
    }}
}}
If the step cannot proceed, output the following format with details of missing information:
Output your results in the following only JSON format for programmatic processing:
{{
    "step": "<current step number>",
    "can_proceed": false,
    "missing_required_arguments": [<list of missing required arguments>],
    "needed_optional_arguments": [<list of optional arguments that are required>],
    "remarks": "<natural language explanation if applicable>"
}}
"""
    return prompt_template